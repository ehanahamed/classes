type Query {
    classById(id: ID!): ClassType
    classesAsStudent: [ClassType]
    classesAsTeacher: [ClassType]
    courseById(id: ID!): Course
    coursesAsStudent: [Course]
    coursesAsTeacher: [Course]
    coursesAsAuthor: [Course]
    authedUser: AuthedUser
}

type Mutation {
    createClass(name: String!, courseId: ID!): ClassType
    createCourse(name: String!): Course
    addStudentToClass(studentUserId: ID!, classId: ID!): Boolean
    addTeacherToClass(teacherUserId: ID!, classId: ID!): Boolean
}

type ClassType {
    id: ID!
    name: String!
    course: Course
    teachers: [User]
    students: [User]
}

type User {
    id: ID!
    username: String
    display_name: String
    oauth_google_email: String
}

type AuthedUser {
    id: ID!
    username: String
    display_name: String
    oauth_google_email: String
    auth_type: AuthType
}

enum AuthType {
    username_password
    oauth_google
}

type Course {
    id: ID!
    name: String!
    authors: [User]
}
