type Query {
    classById(id: ID!): ClassClass
    classesAsStudent: [ClassClass]
    classesAsTeacher: [ClassClass]
    courseById(id: ID!): Course
    coursesAsStudent: [Course]
    coursesAsTeacher: [Course]
    coursesAsAuthor: [Course]
    authedUser: AuthedUser
    classUserSettings(classId: ID!): ClassUserSettings
    announcementById(id: ID!): Announcement
    announcementsByClass(classId: ID!): [Announcement]
}

type Mutation {
    createCourse(name: String!): Course
    updateCourse(id: ID!, name: String!): Course
    deleteCourse(courseId: ID!): Boolean
    createClass(name: String!, courseId: ID): ClassClass
    updateClass(id: ID!, name: String!, courseId: ID, color: String!): ClassClass
    deleteClass(classId: ID!): Boolean
    addStudentToClass(studentUserId: ID!, classId: ID!): Boolean
    addTeacherToClass(teacherUserId: ID!, classId: ID!): Boolean
    updateClassUserSettings(classId: ID!, color: String!): ClassUserSettings
    createAnnouncement(classId: ID!, contentProseMirrorJson: String!): Announcement
    updateAnnouncement(id: ID!, contentProseMirrorJson: String!): Announcement
}

type ClassClass {
    id: ID!
    name: String!
    course: Course
    color: String
    teachers: [User]
    students: [User]
    userSettings: ClassUserSettings
    announcements: [Announcement]
}

type User {
    id: ID!
    username: String
    displayName: String
    oauthGoogleEmail: String
}

type AuthedUser {
    id: ID!
    username: String
    displayName: String
    oauthGoogleEmail: String
    authType: AuthType
}

enum AuthType {
    username_password
    oauth_google
}

type Course {
    id: ID!
    name: String!
}

type ClassUserSettings {
    color: String
}

type Announcement {
    id: ID!
    user: User!
    classId: ID!
    contentProseMirrorJson: String!
}

