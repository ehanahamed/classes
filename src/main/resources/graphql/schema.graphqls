scalar DateTime

type Query {
    classById(id: ID!): ClassClass
    classesAsStudent: [ClassClass]
    classesAsTeacher: [ClassClass]
    courseById(id: ID!): Course
    coursesAsStudent: [Course]
    coursesAsTeacher: [Course]
    coursesAsAuthor: [Course]
    authedUser: AuthedUser
    classUserSettings(classId: ID!): ClassUserSettings
    announcementById(id: ID!): Announcement
    assignmentById(id: ID!): Assignment
    assignmentDraftById(id: ID!): Assignment
}

type Mutation {
    createCourse(name: String!): Course
    updateCourse(id: ID!, name: String!): Course
    deleteCourse(courseId: ID!): Boolean
    createClass(name: String!, courseId: ID): ClassClass
    updateClass(id: ID!, name: String!, courseId: ID, color: String!): ClassClass
    deleteClass(classId: ID!): Boolean
    # addStudentToClass(studentUserId: ID!, classId: ID!): Boolean
    # addTeacherToClass(teacherUserId: ID!, classId: ID!): Boolean
    updateClassUserSettings(classId: ID!, color: String!): ClassUserSettings
    createAnnouncement(classId: ID!, contentProseMirrorJson: String!): Announcement
    updateAnnouncement(id: ID!, contentProseMirrorJson: String!): Announcement
    createAssignment(
        classId: ID!,
        title: String!,
        descriptionProseMirrorJson: String,
        points: Int,
        dueAt: DateTime
    ): Assignment
    updateAssignment(
        id: ID!,
        classId: ID!,
        title: String!,
        descriptionProseMirrorJson: String,
        points: Int,
        dueAt: DateTime
    ): Assignment
    createAssignmentDraft(
        classId: ID!,
        title: String!,
        descriptionProseMirrorJson: String,
        points: Int,
        dueAt: DateTime
    ): Assignment
    updateAssignmentDraft(
        id: ID!,
        classId: ID!,
        title: String!,
        descriptionProseMirrorJson: String,
        points: Int,
        dueAt: DateTime
    ): Assignment
    generateClassCode(
        classId: ID!
    ): String
    joinClass(
        classCode: String
    ): ID!
}

type ClassClass {
    id: ID!
    name: String!
    course: Course
    color: String
    teachers: [User]
    students: [User]
    userSettings: ClassUserSettings
    announcements: [Announcement]
    assignments: [Assignment]
    assignmentDrafts: [Assignment]
    classCode: String
}

type User {
    id: ID!
    username: String
    displayName: String
    oauthGoogleEmail: String
}

type AuthedUser {
    id: ID!
    username: String
    displayName: String
    oauthGoogleEmail: String
    authType: AuthType
}

enum AuthType {
    username_password
    oauth_google
}

type Course {
    id: ID!
    name: String!
}

type ClassUserSettings {
    color: String
}

type Announcement {
    id: ID!
    user: User!
    classId: ID!
    contentProseMirrorJson: String
    createdAt: DateTime
    updatedAt: DateTime
}

type Assignment {
    id: ID!
    classId: ID!
    teacher: User!
    title: String!
    descriptionProseMirrorJson: String
    points: Int
    dueAt: DateTime
    createdAt: DateTime
    updatedAt: DateTime
}

